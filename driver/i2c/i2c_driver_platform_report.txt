2014-11-7
内核版本：linux-3.4.2

platform_device注册过程：

	platform_device数据结构定义：
	
		struct platform_device {
			const char	* name;
			int		id;
			struct device	dev;
			u32		num_resources;
			struct resource	* resource;
		
			const struct platform_device_id	*id_entry;
		
			/* MFD cell pointer */
			struct mfd_cell *mfd_cell;
		
			/* arch specific additions */
			struct pdev_archdata	archdata;
		};

	platform_device注册过程：

		platform_device_register(&s3c_device_i2c0)
			->platform_device_add(&s3c_device_i2c0)
					(&s3c_device_i2c0)->dev.parent = &platform_bus
					(&s3c_device_i2c0)->dev.bus = &platform_bus_type
					->device_add(&(s3c_device_i2c0.dev))
						->bus_add_device(&(s3c_device_i2c0.dev))
							klist_add_tail(&(s3c_device_i2c0.dev)->p->knode_bus, &s3c_device_i2c0.bus->p->klist_devices);
						bus_probe_device(&(s3c_device_i2c0.dev));
							->device_attach(&(s3c_device_i2c0.dev));
								->bus_for_each_drv(&(s3c_device_i2c0.dev)->bus, NULL, &(s3c_device_i2c0.dev), __device_attach);		遍历总线上的driver_list，对每个driver调用__device_attach
									->__device_attach(struct device_driver *drv, void *data)     此处的data就是传入的s3c_device_i2c0.dev
										
										
		__device_attach(struct device_driver *drv, void *data)
		{
			if (!driver_match_device(drv, dev))
					->return drv->bus->match ? drv->bus->match(dev, drv) : 1;		调用platform的match函数(platform_match())来匹配,如果匹配到的话，就调用driver_probe_device，否则返回0
			return 0;
													
			return driver_probe_device(drv, dev);
		}
		
		driver_probe_device(struct device_driver *drv, struct device *dev)		如果匹配到驱动，就调用驱动中的probe函数
			->really_probe(dev, drv);
				->dev->bus->probe(dev);							如果总线有probe函数，就调用总线的probe函数，如果没有，则调用device_driver的probe函数，platform总线没有probe函数
				->drv->probe(dev);									调用device_driver的probe函数


		platform的match函数，用来检查设备和驱动是否匹配
			platform_match(struct device *dev, struct device_driver *drv)
				struct platform_device *pdev = to_platform_device(dev);				通过platform_device中的dev得到指向platform_device的指针
				struct platform_driver *pdrv = to_platform_driver(drv);				通过platform_driver中的drv得到指向platform_driver的指针
				->of_driver_match_device(dev, drv)				
					->of_match_device(drv->of_match_table, dev)
						
				->platform_match_id(pdrv->id_table, pdev)						检查platform_driver中的id_table是否可以支持platform_device
					if (strcmp(pdev->name, id->name) == 0) 						判断platform_device中的name字段和platform_driver中id_table里的name是否能匹配
			


platform_driver注册过程：

	platform_driver数据结构定义：
	
		struct platform_driver {
			int (*probe)(struct platform_device *);
			int (*remove)(struct platform_device *);
			void (*shutdown)(struct platform_device *);
			int (*suspend)(struct platform_device *, pm_message_t state);
			int (*resume)(struct platform_device *);
			struct device_driver driver;
			const struct platform_device_id *id_table;
		};


	platform_driver注册过程：
		platform_driver_register(struct platform_driver *drv)
			if (drv->probe)							如果platform_driver里定义了probe函数，则将platform_driver里的driver定义为platform_drv_probe()函数
				drv->driver.probe = platform_drv_probe;
			->driver_register(&drv->driver);
				->bus_add_driver(drv)
					->driver_attach(drv);
						->bus_for_each_dev(drv->bus, NULL, drv, __driver_attach);		遍历总线上的设备列表，对每个设备分别调用__driver_attach函数
							―>__driver_attach(struct device *dev, void *data)		此处的data就是传入的s3c24xx_i2c_driver.driver
							
		
		__driver_attach(struct device *dev, void *data)
			->driver_match_device(drv, dev)
					return drv->bus->match ? drv->bus->match(dev, drv) : 1;			调用总线的match函数(platform_match())来匹配
					如果匹配则继续执行：
					->driver_probe_device(drv, dev);
						->really_probe(dev, drv);
							->dev->bus->probe(dev);							如果总线有probe函数，就调用总线的probe函数，如果没有，则调用device_driver的probe函数，platform总线没有probe函数
							->drv->probe(dev);									drv->probe()函数就是platform_drv_probe()函数
							
		platform_drv_probe(struct device *_dev)
			struct platform_driver *drv = to_platform_driver(_dev->driver);
			struct platform_device *dev = to_platform_device(_dev);
			return drv->probe(dev);											调用platform_driver里定义的probe函数